service:
  name: bakery-recipes-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

# package:
#   individually: true

provider:
  name: aws
  runtime: nodejs10.x
  
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    RECIPES_TABLE: Recipes-${self:provider.stage}
    # TODOS_TABLE: Todos-${self:provider.stage}
    USER_ID_INDEX: UserIdIndex 
    IMAGES_S3_BUCKET: serverless-recipes-images-edithle-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
  
  iamRoleStatements:
    - Effect: Allow
      Action:
        - codedeploy:*
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource:
        - "*"

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetRecipes:
    handler: src/lambda/http/getRecipes.handler
    events:
      - http:
          method: get
          path: recipes
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}/index/${self:provider.environment.USER_ID_INDEX}

  # TODO: Configure this function
  CreateRecipe:
    handler: src/lambda/http/createRecipe.handler
    events:
      - http:
          method: post
          path: recipes
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/schemas/create-recipe-request.json)}
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}
  # TODO: Configure this function
  UpdateRecipe:
    handler: src/lambda/http/updateRecipe.handler
    events:
      - http:
          method: patch
          path: recipes/{recipeId}
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/schemas/update-recipe-request.json)}
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteRecipe.handler
    events:
      - http:
          method: delete
          path: recipes/{recipeId}
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}

  # TODO: Configure this function
  # 


resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi


    RecipesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: recipeId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: recipeId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.RECIPES_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: recipeId
              KeyType: RANGE
            Projection:
              ProjectionType: ALL

    # TodosDynamoDBTable:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     AttributeDefinitions:
    #       - AttributeName: todoId
    #         AttributeType: S
    #       - AttributeName: userId
    #         AttributeType: S
    #       # - AttributeName: createdAt
    #       #   AttributeType: S
    #     KeySchema:
    #       - AttributeName: todoId
    #         KeyType: HASH
    #       # - AttributeName: todoId
    #       #   KeyType: RANGE
        
    #     BillingMode: PAY_PER_REQUEST
    #     TableName: ${self:provider.environment.TODOS_TABLE}
    #     GlobalSecondaryIndexes:
    #       - IndexName: ${self:provider.environment.USER_ID_INDEX}
    #         KeySchema:
    #         - AttributeName: userId
    #           KeyType: HASH
    #         - AttributeName: todoId
    #           KeyType: RANGE
    #         Projection:
    #           ProjectionType: ALL
    # TODO: Add any necessary AWS resources
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                # - GET
                - PUT
                - POST
                # - DELETE
                # - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket